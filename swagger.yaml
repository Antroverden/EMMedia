openapi: 3.0.1
info:
  title: Effective Mobile Social Media System API
  contact:
    name: (send offer)
    email: antroverden@gmail.com
  version: v3
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /api/v1/users/friends/{friendId}:
    put:
      tags:
      - Контроллер управления пользователями
      description: Добавить пользователя в друзья
      operationId: addFriend
      parameters:
      - name: friendId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetails'
      responses:
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                enum:
                - 100 CONTINUE
                - 101 SWITCHING_PROTOCOLS
                - 102 PROCESSING
                - 103 CHECKPOINT
                - 200 OK
                - 201 CREATED
                - 202 ACCEPTED
                - 203 NON_AUTHORITATIVE_INFORMATION
                - 204 NO_CONTENT
                - 205 RESET_CONTENT
                - 206 PARTIAL_CONTENT
                - 207 MULTI_STATUS
                - 208 ALREADY_REPORTED
                - 226 IM_USED
                - 300 MULTIPLE_CHOICES
                - 301 MOVED_PERMANENTLY
                - 302 FOUND
                - 302 MOVED_TEMPORARILY
                - 303 SEE_OTHER
                - 304 NOT_MODIFIED
                - 305 USE_PROXY
                - 307 TEMPORARY_REDIRECT
                - 308 PERMANENT_REDIRECT
                - 400 BAD_REQUEST
                - 401 UNAUTHORIZED
                - 402 PAYMENT_REQUIRED
                - 403 FORBIDDEN
                - 404 NOT_FOUND
                - 405 METHOD_NOT_ALLOWED
                - 406 NOT_ACCEPTABLE
                - 407 PROXY_AUTHENTICATION_REQUIRED
                - 408 REQUEST_TIMEOUT
                - 409 CONFLICT
                - 410 GONE
                - 411 LENGTH_REQUIRED
                - 412 PRECONDITION_FAILED
                - 413 PAYLOAD_TOO_LARGE
                - 413 REQUEST_ENTITY_TOO_LARGE
                - 414 URI_TOO_LONG
                - 414 REQUEST_URI_TOO_LONG
                - 415 UNSUPPORTED_MEDIA_TYPE
                - 416 REQUESTED_RANGE_NOT_SATISFIABLE
                - 417 EXPECTATION_FAILED
                - 418 I_AM_A_TEAPOT
                - 419 INSUFFICIENT_SPACE_ON_RESOURCE
                - 420 METHOD_FAILURE
                - 421 DESTINATION_LOCKED
                - 422 UNPROCESSABLE_ENTITY
                - 423 LOCKED
                - 424 FAILED_DEPENDENCY
                - 425 TOO_EARLY
                - 426 UPGRADE_REQUIRED
                - 428 PRECONDITION_REQUIRED
                - 429 TOO_MANY_REQUESTS
                - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
                - 451 UNAVAILABLE_FOR_LEGAL_REASONS
                - 500 INTERNAL_SERVER_ERROR
                - 501 NOT_IMPLEMENTED
                - 502 BAD_GATEWAY
                - 503 SERVICE_UNAVAILABLE
                - 504 GATEWAY_TIMEOUT
                - 505 HTTP_VERSION_NOT_SUPPORTED
                - 506 VARIANT_ALSO_NEGOTIATES
                - 507 INSUFFICIENT_STORAGE
                - 508 LOOP_DETECTED
                - 509 BANDWIDTH_LIMIT_EXCEEDED
                - 510 NOT_EXTENDED
                - 511 NETWORK_AUTHENTICATION_REQUIRED
    delete:
      tags:
      - Контроллер управления пользователями
      description: Удалить пользователя из друзей
      operationId: removeFriend
      parameters:
      - name: friendId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetails'
      responses:
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                enum:
                - 100 CONTINUE
                - 101 SWITCHING_PROTOCOLS
                - 102 PROCESSING
                - 103 CHECKPOINT
                - 200 OK
                - 201 CREATED
                - 202 ACCEPTED
                - 203 NON_AUTHORITATIVE_INFORMATION
                - 204 NO_CONTENT
                - 205 RESET_CONTENT
                - 206 PARTIAL_CONTENT
                - 207 MULTI_STATUS
                - 208 ALREADY_REPORTED
                - 226 IM_USED
                - 300 MULTIPLE_CHOICES
                - 301 MOVED_PERMANENTLY
                - 302 FOUND
                - 302 MOVED_TEMPORARILY
                - 303 SEE_OTHER
                - 304 NOT_MODIFIED
                - 305 USE_PROXY
                - 307 TEMPORARY_REDIRECT
                - 308 PERMANENT_REDIRECT
                - 400 BAD_REQUEST
                - 401 UNAUTHORIZED
                - 402 PAYMENT_REQUIRED
                - 403 FORBIDDEN
                - 404 NOT_FOUND
                - 405 METHOD_NOT_ALLOWED
                - 406 NOT_ACCEPTABLE
                - 407 PROXY_AUTHENTICATION_REQUIRED
                - 408 REQUEST_TIMEOUT
                - 409 CONFLICT
                - 410 GONE
                - 411 LENGTH_REQUIRED
                - 412 PRECONDITION_FAILED
                - 413 PAYLOAD_TOO_LARGE
                - 413 REQUEST_ENTITY_TOO_LARGE
                - 414 URI_TOO_LONG
                - 414 REQUEST_URI_TOO_LONG
                - 415 UNSUPPORTED_MEDIA_TYPE
                - 416 REQUESTED_RANGE_NOT_SATISFIABLE
                - 417 EXPECTATION_FAILED
                - 418 I_AM_A_TEAPOT
                - 419 INSUFFICIENT_SPACE_ON_RESOURCE
                - 420 METHOD_FAILURE
                - 421 DESTINATION_LOCKED
                - 422 UNPROCESSABLE_ENTITY
                - 423 LOCKED
                - 424 FAILED_DEPENDENCY
                - 425 TOO_EARLY
                - 426 UPGRADE_REQUIRED
                - 428 PRECONDITION_REQUIRED
                - 429 TOO_MANY_REQUESTS
                - 431 REQUEST_HEADER_FIELDS_TOO_LARGE
                - 451 UNAVAILABLE_FOR_LEGAL_REASONS
                - 500 INTERNAL_SERVER_ERROR
                - 501 NOT_IMPLEMENTED
                - 502 BAD_GATEWAY
                - 503 SERVICE_UNAVAILABLE
                - 504 GATEWAY_TIMEOUT
                - 505 HTTP_VERSION_NOT_SUPPORTED
                - 506 VARIANT_ALSO_NEGOTIATES
                - 507 INSUFFICIENT_STORAGE
                - 508 LOOP_DETECTED
                - 509 BANDWIDTH_LIMIT_EXCEEDED
                - 510 NOT_EXTENDED
                - 511 NETWORK_AUTHENTICATION_REQUIRED
  /api/v1/post:
    put:
      tags:
      - Контроллер управления постами
      summary: Обновить свой пост
      operationId: updatePost
      parameters:
      - name: post-id
        in: query
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                post:
                  $ref: '#/components/schemas/PostRequestDto'
                userDetails:
                  $ref: '#/components/schemas/UserDetails'
      responses:
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PostResponseDto'
    post:
      tags:
      - Контроллер управления постами
      summary: Создать новый пост
      operationId: postNewPost
      requestBody:
        content:
          application/json:
            schema:
              required:
              - post
              type: object
              properties:
                post:
                  $ref: '#/components/schemas/PostRequestDto'
                userDetails:
                  $ref: '#/components/schemas/UserDetails'
      responses:
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponseDto'
            image/jpg:
              schema:
                $ref: '#/components/schemas/PostResponseDto'
    delete:
      tags:
      - Контроллер управления постами
      summary: Удалить свой пост
      operationId: deletePost
      parameters:
      - name: post-id
        in: query
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetails'
      responses:
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: OK
  /api/v1/users/register:
    post:
      tags:
      - Контроллер управления пользователями
      description: Регистрация пользователя
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      responses:
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: OK
  /api/v1/users/login:
    post:
      tags:
      - Контроллер управления пользователями
      description: Вход
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/LoginResponse'
  /api/v1/messages/{userId}:
    post:
      tags:
      - Контроллер управления сообщениями
      summary: Отправить сообщение пользователю
      operationId: sendMessage
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                messageDto:
                  $ref: '#/components/schemas/MessageDto'
                userDetails:
                  $ref: '#/components/schemas/UserDetails'
        required: true
      responses:
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/MessageResponseDto'
  /api/v1/users/logout:
    get:
      tags:
      - Контроллер управления пользователями
      description: Выход
      operationId: logout
      responses:
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: OK
  /api/v1/post/{userId}:
    get:
      tags:
      - Контроллер управления постами
      summary: Получить посты юзера
      operationId: getUserPosts
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      responses:
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostResponseDto'
  /api/v1/post/feed:
    get:
      tags:
      - Контроллер управления постами
      summary: "Получить последние посты от пользователей, на которых подписан"
      operationId: getUserFeed
      parameters:
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: order
        in: query
        required: false
        schema:
          type: string
          default: desc
      - name: userDetails
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/UserDetails'
      responses:
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostResponseDto'
  /api/v1/messages/{id}/history:
    get:
      tags:
      - Контроллер управления сообщениями
      summary: Получить историю сообщений с юзером
      operationId: getMessages
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: userDetails
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/UserDetails'
      responses:
        "409":
          description: Conflict
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "400":
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
    GrantedAuthority:
      type: object
      properties:
        authority:
          type: string
    UserDetails:
      type: object
      properties:
        enabled:
          type: boolean
        password:
          type: string
        accountNonExpired:
          type: boolean
        credentialsNonExpired:
          type: boolean
        username:
          type: string
        authorities:
          type: array
          items:
            $ref: '#/components/schemas/GrantedAuthority'
        accountNonLocked:
          type: boolean
    PostRequestDto:
      required:
      - header
      - text
      type: object
      properties:
        header:
          maxLength: 50
          minLength: 1
          type: string
        text:
          maxLength: 255
          minLength: 1
          type: string
        images:
          type: array
          items:
            type: string
            format: binary
    Image:
      type: object
      properties:
        id:
          type: integer
          format: int64
        filename:
          type: string
        imageData:
          type: array
          items:
            type: string
            format: byte
        contentType:
          type: string
    PostResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        header:
          type: string
        text:
          type: string
        images:
          type: array
          items:
            $ref: '#/components/schemas/Image'
    RegisterRequest:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
    LoginRequest:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
    LoginResponse:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        username:
          type: string
        token:
          type: string
        role:
          type: string
          enum:
          - ROLE_USER
    MessageDto:
      required:
      - text
      type: object
      properties:
        text:
          type: string
    MessageResponseDto:
      type: object
      properties:
        messageId:
          type: integer
          format: int64
        firstUserId:
          type: integer
          format: int64
        secondUserId:
          type: integer
          format: int64
    Message:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstUser:
          $ref: '#/components/schemas/User'
        secondUser:
          $ref: '#/components/schemas/User'
        text:
          type: string
        sentAt:
          type: string
          format: date-time
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        login:
          type: string
        password:
          type: string
        role:
          type: string
          enum:
          - ROLE_USER
        enabled:
          type: boolean
        accountNonExpired:
          type: boolean
        credentialsNonExpired:
          type: boolean
        username:
          type: string
        authorities:
          type: array
          items:
            $ref: '#/components/schemas/GrantedAuthority'
        accountNonLocked:
          type: boolean
  securitySchemes:
    jwt:
      type: http
      name: Authorization
      in: header
      scheme: bearer
